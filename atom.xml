<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[William DeMeo]]></title>
  <link href="http://williamdemeo.github.io/atom.xml" rel="self"/>
  <link href="http://williamdemeo.github.io/"/>
  <updated>2014-02-13T08:59:24-05:00</updated>
  <id>http://williamdemeo.github.io/</id>
  <author>
    <name><![CDATA[William DeMeo]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Overalgebras]]></title>
    <link href="http://williamdemeo.github.io/blog/2014/02/13/overalgebras/"/>
    <updated>2014-02-13T08:42:53-05:00</updated>
    <id>http://williamdemeo.github.io/blog/2014/02/13/overalgebras</id>
    <content type="html"><![CDATA[<p>The Overalgebras repository contains my article
<a href="https://github.com/williamdemeo/Overalgebras/raw/master/DeMeo-Expansions-AU-2013.pdf">Expansions of finite algebras and their congruence lattices</a>, <em>Algebra Universalis</em>, <strong>69</strong>, 2013,
as well as the GAP software I wrote for constructing new finite algebras by
extending and expanding transitive G-sets, as described in the paper. </p>

<!-- more -->

<p>The published version of the paper is in the file <a href="https://github.com/williamdemeo/Overalgebras/raw/master/DeMeo-Expansions-AU-2013.pdf">DeMeo-Expansions-AU-2013.pdf</a>,
and is also available at <a href="http://link.springer.com">springer.com</a>. </p>

<p>In the file <a href="https://github.com/williamdemeo/Overalgebras/blob/master/gap2uacalc.g">gap2uacalc.g</a> is a GAP program that can be used on its own to convert GAP groups and G-sets into UACalc .ua files,
which can then be imported into the <a href="http://uacalc.org">Universal Algebra Calculator</a>.
See <a href="http://universalalgebra.wordpress.org/documentation/gap/gap-and-uacalc/">universalalgebra.org</a> for more information about <a href="https://github.com/williamdemeo/Overalgebras/blob/master/gap2uacalc.g">gap2uacalc.g</a>.</p>

<p>For questions, comments, or suggestions please <a href="https://github.com/williamdemeo/Overalgebras/issues">submit an issue</a>.</p>

<p>Thanks for your interest in this work!</p>

<p><a href="https://github.com/williamdemeo">@williamdemeo</a></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[IEProps]]></title>
    <link href="http://williamdemeo.github.io/blog/2014/02/13/ieprops/"/>
    <updated>2014-02-13T08:42:42-05:00</updated>
    <id>http://williamdemeo.github.io/blog/2014/02/13/ieprops</id>
    <content type="html"><![CDATA[<p>The <a href="https://github.com/williamdemeo/IEProps">IEPost GitHub repository</a> contains a draft of the article
<a href="https://github.com/williamdemeo/IEProps/blob/master/CommAlg/DeMeo-IEProps-rev1.pdf">Interval enforceable properties of finite groups</a>, to appear in <em>Communications in Algebra</em>.</p>

<!-- more -->

<p>The paper has been accepted and is in the final review stage. It should appear in print sometime in 2014.
The original submission is available in the file <a href="https://github.com/williamdemeo/IEProps/blob/master/CommAlg/DeMeo-IEProps-rev1.pdf">DeMeo-IEProps-rev1.pdf</a>. The latest revision is in the tex directory.</p>

<p>For questions, comments, or suggestions please <a href="https://github.com/williamdemeo/IEProps/issues">submit an issue</a>.</p>

<p>Thanks for your interest in this work!</p>

<p><a href="https://github.com/williamdemeo">@williamdemeo</a></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[GroupSound]]></title>
    <link href="http://williamdemeo.github.io/blog/2014/02/13/groupsound/"/>
    <updated>2014-02-13T06:23:41-05:00</updated>
    <id>http://williamdemeo.github.io/blog/2014/02/13/groupsound</id>
    <content type="html"><![CDATA[<p><em>What does a nonabelian group sound like?</em></p>

<p><a href="http://soundmath.github.io/GroupSound/">The GroupSound project</a> is
about harmonic analysis on finite groups. Classical dsp filtering algorithms can
be implemented as operations involving functions (e.g., audio signals) defined
on a finite group. That is, the group serves as the domain, or “index set,” of
the functions.  In this project, we explore the idea of using the finite group 
as an adjustable parameter of a digital audio filter. 
By listening to samples produced using various nonabelian groups, we try to get
a sense of the “acoustical characters” of finite groups.  </p>

<!-- more -->

<p>Underlying many digital signal processing (dsp) algorithms, in particular those
used for digital audio filters, is the convolution operation, which is a
weighted sum of translations $f(x-y)$. Most classical results of dsp are easily
and elegantly derived if we define our functions on $\mathbb{Z}/n\mathbb{Z}$, the
abelian group of integers modulo n. If we replace this underlying “index set”
with a nonabelian group, then translation may be written $f(y^{-1}x)$, and the
resulting audio filters arising from convolution naturally produce different
effects than those obtained with ordinary (abelian group) convolution. </p>

<p>Please visit The aim of
<a href="http://soundmath.github.io/GroupSound/">the GroupSound project webpage</a> for
more details. </p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[HoTT]]></title>
    <link href="http://williamdemeo.github.io/blog/2014/02/12/hott/"/>
    <updated>2014-02-12T07:04:34-05:00</updated>
    <id>http://williamdemeo.github.io/blog/2014/02/12/hott</id>
    <content type="html"><![CDATA[<p>This post is an amalgamation of information, collection from various sources,
about <a href="https://en.wikipedia.org/wiki/Intuitionistic_type_theory">intuitionistic type theory</a> and <a href="http://en.wikipedia.org/wiki/Homotopy_type_theory">homotopy type theory</a>.
These notes are in very rough form and were compiled for my own reference. There
are many other <a href="#references">online resources</a> providing better explanations of this topic.
<!-- more --></p>

<h2 id="background">Background</h2>

<h3 id="type-theory">Type Theory</h3>

<p>A <a href="https://en.wikipedia.org/wiki/Type_theory">type theory</a> is a formal system in which every “term” has a “type” and
operations are restricted to terms of a certain type. 
The types in type theory play a similar role to sets in set theory, but
<em>functions definable in type theory are always computable.</em></p>

<p>Some type theories can serve as alternatives to set theory as a foundation for math;
e.g., Church’s <a href="https://en.wikipedia.org/wiki/Typed_lambda_calculus">typed $\lambda$-calculi</a> and Martin-Löf’s <a href="https://en.wikipedia.org/wiki/Intuitionistic_type_theory">intuitionistic type theory</a>.</p>

<hr />

<h3 id="intuitionistic-type-theory">Intuitionistic Type Theory</h3>
<p>Adopting Brouwer’s constructive viewpoint, intuitionistic theories
developed as an alternative foundation of mathematics, one in which proofs are
seen as the fundamental forms of construction.  The notion of <em>proof 
relevance</em> is thus a characteristic feature of an intuitionistic approach.
(Here, intuitionism and constructivism are used interchangeably.) </p>

<p>The main idea of <em>intuitionistic type theory</em> is the identification of a
proposition with the type of its proof.
Intuitionistic type theory extends this identification to predicate logic by
introducing dependent types, that is, types that depend on a value. </p>

<hr />

<h3 id="proof-versus-formal-proof">Proof versus formal proof</h3>
<p>We defer to Robert Harper’s <a href="#references">blog posts</a> about this, but
here are some highlights:</p>

<p>In the context of HoTT, proof relevance means that proofs become mathematical
objects. To fully understand this standpoint, it is necessary
to draw a distinction between the notion of a <em>proof</em> and the notion of
<em>formal proof</em>. </p>

<p>A <em>formal proof</em> is a proof given in a fixed formal system, such as the axiomatic
theory of sets, and arises from the application of the inductively defined rules
in that system.  Whereas every formal proof is also a proof (assuming soundness
of the system) the converse is not true.  This follows from
Gödel’s Incompleteness Theorem, which states that there exist true
propositions (with a proof) that cannot be proved formally using the rules of
the system.</p>

<p>Unlike conventional formally defined systems, HoTT does not surmise that all
possible proofs can be fully circumscribed by its rules, but accepts proofs that
cannot be formalized in HoTT.  These are exactly the proofs that are considered
to be <em>relevant</em> and, being treated as mathematical objects, they can be
codified internally as objects of the type theory.</p>

<p>As Harper puts it, “In intuitionistic mathematics proofs are themselves
‘first-class’ mathematical objects that inhabit types that may as well be
identified with the proposition that they prove. Proving a proposition is no
different than constructing a program of a type. In this sense logic is a
branch of mathematics, the branch concerned with those constructions that are
proofs.”</p>

<h3 id="decidability-of-types">Decidability of types</h3>
<p>HoTT is constructive, which means at the very least it does not postulate that
all types are decidable. <em>Any type with decidable equality is a set</em>, by
Hedberg’s Theorem (see the <a href="http://homotopytypetheory.org/book/">HoTT book</a> Section 7.2), so a blanket adoption of
the classical law of the excluded middle would immediately rule out any
higher-dimensional structure.</p>

<h3 id="relation-of-hott-to-other-type-theories">Relation of HoTT to other type theories</h3>
<p>HoTT unites homotopy theory with type theory, by embodying Brouwer’s
intuitionism and drawing from Gentzen’s proof theory.  It is based on the 
observation that <em>types</em> classify the admissible forms of constructions and thus
are programmatically sufficient to encompass all known mathematical
constructions.</p>

<p><strong>ITT</strong> (<em>intentional type theory</em>) serves as the core for other type theories.</p>

<p><strong>ETT</strong> (<em>extensional type theory</em>) extends ITT
with <a href="#equality-of-reflection">equality of reflection</a> (ER) 
and <a href="#uniqueness-of-identity-proofs">uniqueness of identity proofs</a> (UIP):</p>

<p>ETT = ITT + ER + UIP</p>

<p>In ETT types are sets, so ETT is an intuitionistic theory of sets.</p>

<p><strong>HoTT</strong> extends ITT with 
<a href="#higher-inductive-types">higher inductive types</a>
and the <a href="#univalence-axiom">univalence axiom</a>:</p>

<p>HoTT = ITT + HIT + UA</p>

<p>In HoTT types are abstract spaces, and HoTT is an intuitionistic
theory of <a href="weak-infinity-groupoids">weak infinity groupoids</a>.</p>

<hr />

<h2 id="intuitionistic-propositional-logic">Intuitionistic Propositional Logic</h2>

<p>As advanced by Per Martin-Löf, <em>intuitionistic propositional logic</em> (IPL)
distinguishes the notions of judgment and proposition.</p>

<p>A <em>judgment</em> is something that may be known.</p>

<p>A <em>proposition</em> is something that sensibly may be the subject of a judgment.</p>

<p>In IPL there are two basic ‘atomic’ judgments:</p>

<ul>
  <li>
    <p>$A$ prop <br />
is the judgement that $A$ is a well-formed proposition.</p>
  </li>
  <li>
    <p>$A$ true <br />
is the judgement that $A$ is intuitionistically true; i.e., has a proof.</p>
  </li>
</ul>

<p>The inference rules for the prop judgment are called <em>formation rules</em>.</p>

<p>The inference rules for the true judgment are divided into classes:
<strong>introduction rules</strong> and <strong>elimination rules</strong>.</p>

<p>The meaning of a proposition $A$ is given by the introduction rules for the
judgment $A$ true.</p>

<p>The elimination rules are dual and describe what may be deduced from a proof of
$A$ true.</p>

<p>The principle of <em>internal coherence</em> also known as <em>Gentzen’s principle
of inversion</em>, is that the introduction and elimination rules for a proposition
$A$ fit together properly.  </p>

<p>The elimination rules should be strong enough to deduce all information that was
used to introduce $A$ (local completeness), but not so strong as to deduce
information that might not have been used to introduce $A$ (<em>local soundness</em>).  </p>

<h3 id="negative-fragment-of-ipl">Negative fragment of IPL</h3>

<p><strong>Conjunction</strong><br />
If $A$ and $B$ are well-formed propositions, then so is their conjunction, which
we write as $A \wedge B$. </p>

<p>The <em>formation rule for conjunction</em> serves as evidence of the judgment 
$A \wedge B$ prop, and follows from the evidence for the judgments 
$A$ prop and $B$ prop.</p>

<hr />

<!-- more -->

<h3 id="equality-of-reflection">equality of reflection</h3>
<p>coming soon</p>

<h3 id="uniqueness-of-identity-proofs">uniqueness of identity proofs</h3>
<p>coming soon</p>

<h3 id="higher-inductive-types">higher inductive types</h3>
<p>coming soon</p>

<h3 id="univalence-axiom">univalence axiom</h3>
<p>coming soon</p>

<h3 id="weak-infinity-groupoids">weak infinity groupoids</h3>
<p>coming soon</p>

<hr />

<h3 id="references">References</h3>
<ul>
  <li><a href="http://homotopytypetheory.org/book/">HoTT book</a>  </li>
  <li><a href="http://existentialtype.wordpress.com/2013/07/10/constructive-mathematics-is-not-meta-mathematics/">Constructive Mathematics Is Not Metamathematics</a>  </li>
  <li><a href="http://existentialtype.wordpress.com/2012/08/11/extensionality-intensionality-and-brouwers-dictum/">Extensionality, Intensionality, and Brouwer’s Dictum</a>  </li>
  <li><a href="http://www.cs.cmu.edu/~rwh/courses/hott/">Robert Harper’s graduate seminar on HoTT</a></li>
</ul>

<h3 id="related-wikipedia-pages">Related Wikipedia Pages</h3>
<ul>
  <li><a href="https://en.wikipedia.org/wiki/Intuitionistic_type_theory">intuitionistic type theory</a></li>
  <li><a href="https://en.wikipedia.org/wiki/Type_theory">type theory</a></li>
  <li><a href="https://en.wikipedia.org/wiki/Typed_lambda_calculus">typed $\lambda$-calculi</a></li>
  <li><a href="http://en.wikipedia.org/wiki/Homotopy_type_theory">homotopy type theory</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Cloning an Octopress repo]]></title>
    <link href="http://williamdemeo.github.io/blog/2014/02/07/cloning-an-octopress-repo/"/>
    <updated>2014-02-07T20:46:19-05:00</updated>
    <id>http://williamdemeo.github.io/blog/2014/02/07/cloning-an-octopress-repo</id>
    <content type="html"><![CDATA[<p>When attempting to clone my Octopress repository on a new machine, I had the
same  <code>Updates were rejected</code> problem that is described on <a href="http://weishi.github.io/blog/2013/07/24/setup-an-existing-octopress-repository-after-git-clone/">this page</a>.
Based on the information provided on that page, combined with a few other
commands required for Ubuntu machines, this post provides instructions for
cloning an Octopress repository.<br />
<!-- more --></p>

<p>(This works on Ubuntu 13.10 and probably other variants.)</p>

<hr />

<ol>
  <li>
    <p>Make sure ruby1.9.1-dev and gem are installd:</p>

    <pre><code>sudo apt-get install ruby1.9.1-dev gem
gem install bundler
rbenv rehash
</code></pre>
  </li>
  <li>
    <p>Get the source and initialize empty _deploy directory:</p>

    <pre><code>git clone git@github.com:williamdemeo/williamdemeo.github.io.git
cd williamdemeo.github.io/
git checkout source
mkdir _deploy
cd _deploy
git init
git remote add -t master -f origin git@github.com:williamdemeo/williamdemeo.github.io.git
cd ..
</code></pre>
  </li>
  <li>
    <p>Use bundler to check that all the dependencies in GemFile are met:</p>

    <pre><code>bundle install
</code></pre>
  </li>
  <li>
    <p>Generate the pages and deploy:</p>

    <pre><code>rake generate
rake deploy
</code></pre>
  </li>
</ol>

<p><strong>Troubleshooting.</strong> 
If <code>rake generate</code> produces “invalid byte sequence in US-ASCII” then try the following: </p>

<pre><code>    # from the command line
    export LANG=en_US.UTF-8
    export LANGUAGE=en_US.UTF-8
    export LC_ALL=en_US.UTF-8
    bundle
</code></pre>

<hr />

<h2 id="workflow">Workflow</h2>

<ol>
  <li>
    <p>Make some changes, e.g., create a new post:</p>

    <pre><code>rake new_post["title"]
</code></pre>
  </li>
  <li>
    <p>Posts live in <code>source/_posts</code>.  Edit one and push the changes to source
branch either directly with Magit or with</p>

    <pre><code>git add .
git commit -am "explanation of changes" 
git push origin source
</code></pre>
  </li>
  <li>
    <p>Now preview the changes: <code>rake preview</code> and load <code>http://localhost:4000</code> in browser.</p>
  </li>
  <li>
    <p>When satisfied, <code>rake deploy</code>.</p>
  </li>
</ol>

<hr />

<h2 id="other-resources">Other Resources</h2>

<ul>
  <li><a href="http://stackoverflow.com/questions/14245822/cannot-install-redcloth">Get RedCloth installed properly on Ubuntu</a>   </li>
  <li><a href="http://paulsturgess.co.uk/blog/2013/04/24/hello-octopress-and-github-pages/">Setup Octopress, pick a theme, maintain with rake</a>  </li>
  <li><a href="http://weishi.github.io/blog/2013/07/24/setup-an-existing-octopress-repository-after-git-clone/">Setup an existing Octopress repo</a>  </li>
  <li><a href="http://blog.zerosharp.com/clone-your-octopress-to-blog-from-two-places/">Maintain Octopress repo on multiple machines</a>  </li>
  <li><a href="http://www.lucypark.kr/blog/2013/02/25/mathjax-kramdown-and-octopress/">Get MathJax working (one way)</a></li>
  <li><a href="http://www.idryman.org/blog/2012/03/10/writing-math-equations-on-octopress/">Get MathJax working (another)</a>  </li>
  <li><a href="https://github.com/imathis/octopress/wiki/3rd-Party-Octopress-Themes">Select a nice theme</a>  </li>
  <li><a href="http://stackoverflow.com/questions/17031651/invalid-byte-sequence-in-us-ascii-argument-error-when-i-run-rake-dbseed-inra">Troubleshoot UTF-8 locale</a>  </li>
  <li><a href="http://blog.bigdinosaur.org/changing-octopresss-header/">Changing fonts and colors</a></li>
  <li>Carl Boettiger has an awesome <a href="http://carlboettiger.info/index.html">open notebook</a>.</li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Diaconescu's Theorem]]></title>
    <link href="http://williamdemeo.github.io/blog/2014/02/05/diaconescus-theorem/"/>
    <updated>2014-02-05T22:52:59-05:00</updated>
    <id>http://williamdemeo.github.io/blog/2014/02/05/diaconescus-theorem</id>
    <content type="html"><![CDATA[<p>I learned about
<a href="http://en.wikipedia.org/wiki/Diaconescu%27s_theorem">Diaconescu’s Theorem</a>
from <a href="http://video.ias.edu/members/1213/0318-AndrejBauer">Andrej Bauer’s lecture</a>.</p>

<p>This post describes the proof as it was presented by Bauer.  These notes are rough
and intended for my own reference.
Please see <a href="http://dorais.org/archives/1031">François Dorais’ blog post</a> 
for a nice discussion of this topic.</p>

<!-- more -->

<hr />

<ul>
  <li>
    <p><strong>The Axiom of Choice</strong> (AC) states that if $\mathcal{S}$ is a collection of nonempty
sets, then there is a choice function $f$ that can be used to select an element
from each set in $\mathcal{S}$.</p>
  </li>
  <li>
    <p><strong>Law of the Excluded Middle</strong> (LEM) states that $P$ is a proposition, then
$P \bigvee \neg P$.</p>
  </li>
  <li>
    <p><strong>Diaconescu’s Theorem:</strong> AC $\rightarrow$ LEM.</p>

    <p><strong>Proof:</strong>  Assume AC.  Let $P$ be any proposition.  We will prove
$P \bigvee \neg P$.</p>

    <p>Define the set $\mathbf{2} = \{0, 1\} = \{x \mid x = 0 \bigvee x= 1\}$.</p>

    <p>Define the following sets:</p>

<script type="math/tex; mode=display">A = \{x \mid (x = 0) \bigvee P\}</script>

<script type="math/tex; mode=display">B = \{y \mid (y = 1) \bigvee P\}</script>

    <p>Note that $P \Rightarrow A = B = \mathbf{2}$. Therefore,
$A \neq B \Rightarrow \neg P$.</p>

    <p>Both of the sets $A$ and $B$ are nonempty, since 0 belongs to $A$ and 1 belongs to $B$. </p>

    <p>Therefore, $\{A, B\}$ is a set of nonempty sets, so by AC we have a choice function,
<!-- Note that the set $\\{A, B\\}$ is defined as $\\{A, B\\} = \\{X \in
\mathbf{Set} | X = A \bigvee X = B\\}$ (by pairing axiom).--></p>

<script type="math/tex; mode=display">f : \{A, B\} \rightarrow A \cup B, \text{ and note that } A\cup B = \{0, 1\}.</script>

    <p>Now, because equality on $\mathbb{N}$ <em>is</em> decidabile (which can be proved
by induction on $\mathbb{N}$), we can consider cases:</p>

    <p>If $f(A) = 0 = f(B)$, then $0 \in B$, so $P$.</p>

    <p>If $f(A) = 1 = f(B)$, then $1 \in A$, so $P$.</p>

    <p>If $f(A) \neq f(B)$, then $A \neq B$ so $P$ cannot hold.
(Recall, $P \Rightarrow A = B = \mathbf{2}$.)</p>

    <p>We have covered all cases and found that $P \bigvee \neg P$ holds. 
<span style="float:right">∎</span></p>
  </li>
</ul>

<hr />

<h2 id="coq">Coq</h2>

<p><a href="http://coq.inria.fr/V8.1/stdlib/Coq.Logic.Diaconescu.html">Proofs of Diaconescu’s Theorem in Coq</a></p>

<hr />

<h2 id="appendix">Appendix</h2>

<ul>
  <li><strong>Decidable Sets.</strong>
A set $S$ is <strong>decidable</strong> if for all $x, y \in S$ we have
$x = y \bigvee x \neq y$. The empty set and singleton sets are trivially
decidable, but some more complicated sets are decidable too. For example, one
can use induction to show that the set of natural numbers is decidable. This
and the following fact shows that every set of natural numbers, in particular
$\{0,1\}$, is also decidable. </li>
</ul>

<hr />

<h2 id="references">References</h2>

<ul>
  <li>Diaconescu, “Axiom of choice and complementation,” <em>Proc. AMS</em> 51 (1975), 176–178. <a href="http://dx.doi.org/10.1090/S0002-9939-1975-0373893-X">doi:10.1090/S0002-9939-1975-0373893-X</a></li>
</ul>
]]></content>
  </entry>
  
</feed>
