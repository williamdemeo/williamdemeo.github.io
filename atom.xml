<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[William DeMeo]]></title>
  <link href="http://williamdemeo.github.io/atom.xml" rel="self"/>
  <link href="http://williamdemeo.github.io/"/>
  <updated>2014-03-04T19:02:15-05:00</updated>
  <id>http://williamdemeo.github.io/</id>
  <author>
    <name><![CDATA[William DeMeo]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Isotopy]]></title>
    <link href="http://williamdemeo.github.io/blog/2014/02/13/isotopy/"/>
    <updated>2014-02-13T21:21:00-05:00</updated>
    <id>http://williamdemeo.github.io/blog/2014/02/13/isotopy</id>
    <content type="html"><![CDATA[<p><em>Equivalence of algebraic structures</em></p>

<p>Consider two finite algebras that are the same
except for a relabeling of the operations.
Our intuition tells us that these are simply different names for the same
mathematical structure.
Formally, however, not only are these distinct mathematical objects, but also
they are nonisomorphic.</p>

<p><em>Isotopy</em> is another well known notion of “sameness” that is 
broader than isomorphism. However, I recently proved a result that
shows why isotopy also fails to capture algebraic equivalence. 
<!-- more -->
$\def\bA{\bf A} \def\bB{\bf B} \def\bC{\bf C}$ </p>

<p>This post provides a little bit of background and motivation, with a
couple of examples of the problems that arise when trying to decide whether two 
algebraic objects are “equivalent.”</p>

<hr />

<h2 id="example">Example</h2>

<p>Let us consider an example of two algebras that are the same 
except for the naming of their operations.  (This is an 
elaboration on Exercises 5.1 in
<a href="http://books.google.com/books/about/Algebras_lattices_varieties.html">Algebras, Lattices, Varieties</a>.)</p>

<p>Let $\bA$ be an algebra of size 4 and label the elements of the universe $\{1,2,3,4\}$.
Suppose $\bA$ has two unary operations, $f^\bA$ 
and $g^\bA$, where $f^\bA$ is the permutation $(1,2)(3,4)$ and 
$g^\bA$ is the permutation $(1,3)(2,4)$.  </p>

<p>Thus, the operations permute the elements as follows:</p>

<p><img src="http://williamdemeo.github.io/images/permutations.png" width="150" height="250" /></p>

<p>The congruence lattice of $\bA$ is </p>

<script type="math/tex; mode=display">M_n \cong \{ x_A , \theta_1, \theta_2, \theta_3, 1_A \},</script>

<p>where, by abuse of notation, we identify the congruences with their corresponding
partitions as follows:</p>

<script type="math/tex; mode=display"> 1_A = \mid 1,2,3,4 \mid </script>

<script type="math/tex; mode=display"> \theta_1 = \mid 1, 2 \mid 3, 4 \mid \quad \theta_2 = \mid 1, 3 \mid 2, 4 \mid \quad \theta_3 =
\mid 1, 4 \mid 2, 3 \mid </script>

<script type="math/tex; mode=display">0_A = \mid 1 \mid 2 \mid 3 \mid 4 \mid </script>

<p>Now consider the algebras 
$\mathbf{A}/\theta_1$,
$\mathbf{A}/\theta_2$, and
$\mathbf{A}/\theta_3$ which have respective universes</p>

<script type="math/tex; mode=display">\{ \{1, 2\}, \{3, 4\}\}, \quad  \{ \{1, 3\}, \{2, 4\}\}, \quad 
\{ \{1, 4\}, \{2, 3\}\}.</script>

<p>It is clear that</p>

<script type="math/tex; mode=display">\bA \cong \mathbf{A}/\theta_1 \times \mathbf{A}/\theta_2 \cong
\mathbf{A}/\theta_1 \times\mathbf{A}/\theta_3 \cong \mathbf{A}/\theta_2
\times\mathbf{A}/\theta_3.</script>

<p>Also, no two factors are isomorphic.  This is because of the naming of their
respective operations.</p>

<p>The algebra $\mathbf{A}/\theta_1$ has operations $f^{\bA/\theta_1}$ and
$g^{\bA/\theta_1}$, where $g^{\bA/\theta_1}$ permutes the blocks 
$\{1, 2\}\longleftrightarrow  \{3, 4\}$
and $f^{\bA/\theta_1}$ leaves them fixed.</p>

<p>On the other hand, the algebra $\bA/\theta_2$ has operations $f^{\bA/\theta_2}$
and $g^{\bA/\theta_2}$, where $f^{\bA/\theta_2}$ permutes the blocks
$\{1, 3\} \longleftrightarrow \{2, 4\}$
and $g^{\bA/\theta_2}$ leaves them fixed.</p>

<p>Thus, the operation in $\bA/\theta_1$ corresponding to the symbol $f$ is
the identity, while in $\bA/\theta_2$ the $f$ symbol corresponds to the
nonidentity permutation. But apart from this trivial relabeling, these two
algebraic structures are the same. </p>

<p>This may be viewed as a minor technical issue that could be overcome by simply
viewing the two algebras as <em>nonindexed algebras</em> (see, e.g.,
<a href="http://dml.cz/dmlcz/106973">Polák</a>), and we can certainly say that
<em>up to a relabeling of the operation symbols,</em> the two algebras 
are isomorphic.</p>

<p>However, it would be preferable to have a notion of algebraic equivalence that
did not hinge on operation alignment.</p>

<hr />

<h2 id="deeper-problems">Deeper problems</h2>

<p>The example above was a simple, almost trivial illustration of how the
notion of isomorphic (indexed) algebras fails to capture our intuitive
understanding of what it means for two algebras to be structurally the same.
But there are examples that go deeper and are not as easy to side step.</p>

<p>Consider the Oates-Powell Theorem <a href="#references">1</a> which states that the variety
generated by a finite group has a finite equational basis. </p>

<p>In a <a href="https://github.com/williamdemeo/Isotopy/blob/master/pointedgroups.pdf?raw=true">1982 paper</a>
Roger Bryant proved that if we merely single out an element of the group and
giving it a label, then the resulting algebra (called a <em>pointed group</em>) generates
a variety that need not be finitely based.</p>

<hr />

<h2 id="isotopy">Isotopy</h2>

<p>Any reasonable notion of algebraic equivalence should at least respect
congruences lattice structure.
The congruence relations of algebras are the kernels of homomorphisms, and the 
congruence lattice is a basic “algebraic” feature of an algebra. Certainly we
cannot accept a notion of “sameness” that equates two algebras with different
congruence lattices (puting aside for now what it means for two congruence
lattices to be “different”).</p>

<p><em>Isotopy</em>  provides a notion of “sameness” of
algebras that is less demanding than isomorphism, so there is some hope that 
it provides a reasonably intuitive notion of algebraic equivalence. </p>

<p>But by the foregoing remark, if isotopy is to serve as a notion of algebraic
equivalence, we should at least demand that two isotopic algebras have the
“same” congruence lattices, and for two lattices to be the “same” in
any sense, they must have the same number of elements so that we can at least
find a bijection between them (even if it is not a “structure preserving”
bijection).</p>

<p>However, I recently proved that, for any number $N \in \mathbb{N}$, it’s easy to
construct a pair of isotopic algebras with congruence lattices that differ in
size by more than $N$ elements.  We see from this that there is no hope for
isotopy as a reasonable notion of algebraic equivalence.  (A link to my short
article describing the construction appears below.)</p>

<p>Later, we will explore Voevodsky’s <em>univalence</em> principle and try 
to write down the definitions of universal algebras as higher types so that we
can exploit the ideas of homotopy type theory in order to possibly arrive at a 
more useful, intuitionistic definition of algebraic equivalence.</p>

<hr />

<h2 id="open-github-repository">Open GitHub repository</h2>

<p>The <a href="https://github.com/williamdemeo/Isotopy">Isotopy GitHub repository</a>
contains
<a href="https://github.com/williamdemeo/Isotopy/blob/master/Isotopy.pdf?raw=true">my article</a>
in which I present isotopic algebras with congruence lattices that are vastly
different in size.</p>

<hr />

<h2 id="references">References</h2>

<ul>
  <li>[1] “Identical relations in finite groups,” S. Oates, M. B. Powell, J. Algebra
(1965).  </li>
  <li>[2] “The laws of finite pointed groups” R. M. Bryant, Bull. London Math. Soc,
14 (1982), 119-123. </li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A problem of P&aacute;lfy and Saxl]]></title>
    <link href="http://williamdemeo.github.io/blog/2014/02/13/a-problem-of-palfy-and-saxl/"/>
    <updated>2014-02-13T09:41:27-05:00</updated>
    <id>http://williamdemeo.github.io/blog/2014/02/13/a-problem-of-palfy-and-saxl</id>
    <content type="html"><![CDATA[<p>Suppose the lattice shown below is a congruence lattice of an algebra.</p>

<p><img src="http://williamdemeo.github.io/images/PSM4.png" /></p>

<p><strong>Claim:</strong>
If the three $\alpha_i$’s pairwise permute, then all pairs in the lattice permute. 
<!-- more --></p>

<p>Whether or not this claim is true is a simplified version of a question left open by
Pálfy and Saxl at the end of
<a href="https://github.com/williamdemeo/PalfySaxlProblem/raw/master/PalfySaxl-ConLatAndFactGroups.pdf">their 1990 paper</a>. Below
is a more formal statement of the problem, and a link to my notes which suggest
a method for solving the problem.  There remains one gap in the proof, that I’m
not yet sure how to fill, but I am still hopeful that the overall strategy will work.</p>

<hr />

<h2 id="graphical-composition">Graphical composition</h2>
<p>In order to prove the claim above and its generalization I developed an extension of
an idea described in
<a href="https://github.com/williamdemeo/PalfySaxlProblem/raw/master/Werner-PartLatConLat.pdf">Heinrich Werner’s paper</a>
called <em>graphical composition</em>.</p>

<hr />

<h2 id="the-problem">The problem</h2>
<p>Here we state the problem more precisely.</p>

<p>Given two equivalence relations $\alpha$ and $\beta$ on a set $X$, the relation</p>

<script type="math/tex; mode=display">\alpha \circ \beta = \{(x,y) \in X^2: (\exists z)(x \; \alpha \; z \; \beta \; y)\}</script>

<p>is called the <em>composition</em> of $\alpha$ and $\beta$, and if 
$\alpha \circ \beta = \beta \circ \alpha$ then $\alpha$ and $\beta$ are said to
<em>permute</em>.</p>

<p><strong>Problem.</strong>
$\def\bA{\bf A} \def\bB{\bf B}$
Let $\bA$ be a finite algebra with $\operatorname{Con} \bA$ isomorphic to
$M_n$, for some $n\geq 4$.  If three nontrivial congruences of $\bA$ pairwise
permute, does it follow that every pair of congruences of $\bA$ permute?</p>

<hr />

<h2 id="open-github-repository">Open GitHub repository</h2>
<p>In my
<a href="https://github.com/williamdemeo/PalfySaxlProblem">GitHub repository</a>
you can find    </p>

<ul>
  <li><a href="https://github.com/williamdemeo/PalfySaxlProblem/raw/master/PalfySaxlProblem.pdf">my notes</a>  </li>
  <li><a href="https://github.com/williamdemeo/PalfySaxlProblem/raw/master/PalfySaxl-ConLatAndFactGroups.pdf">Pálfy and Saxl’s paper</a>  </li>
  <li><a href="https://github.com/williamdemeo/PalfySaxlProblem/raw/master/Werner-PartLatConLat.pdf">Werner’s paper</a>.</li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Algebra &amp; Logic Meetings]]></title>
    <link href="http://williamdemeo.github.io/blog/2014/02/13/algebra-and-logic-meetings/"/>
    <updated>2014-02-13T09:31:06-05:00</updated>
    <id>http://williamdemeo.github.io/blog/2014/02/13/algebra-and-logic-meetings</id>
    <content type="html"><![CDATA[<p>This is collection of links to upcoming meetings in the subjects that interest
me most.</p>

<!-- more -->

<h2 id="section">2014</h2>
<ul>
  <li><a href="http://vsl2014.at/">Vienna Summer of Logic</a> Vienna, July 9–24.
    <ul>
      <li><a href="http://www.logic.at/lc2014/">Logic Colloquium</a> July 14–19.</li>
      <li><a href="http://www.logic.at/latd2014/">Logic, Algebra and Truth Degrees</a> July 16–19.</li>
      <li><a href="http://lii.rwth-aachen.de/lics/csl-lics14/">Computer Science Logic (CSL) and Logic in Computer Science (LICS)</a> July 14–18.  </li>
      <li><a href="http://vsl2014.at/pages/RTATLCA-cfp.html">Typed Lambda Calculi and Applications</a> July 14–17.  </li>
      <li><a href="http://vsl2014.at/pages/UNIF-index.html">Workshop on Unification</a> July 13.  </li>
      <li><a href="http://vsl2014.at/pages/Coq-index.html">Coq Workshop</a> July 18.  </li>
      <li><a href="http://cs.nyu.edu/ijcar2014/">International Joint Conference on Automated Reasoning (IJCAR)</a> July 19–22.  </li>
    </ul>
  </li>
  <li><a href="http://kaluzhnin-conf.incarne.net/">International Algebraic Conference: Kaluzhnin Memorial</a> Kyiv, Ukraine, July 7–12.</li>
  <li><a href="http://www.win.tue.nl/~hansc/agc2014/index.html">Algebra, Geometry and Computation</a> Eindhoven, The Netherlands, July 2–4.</li>
  <li><a href="http://www.karlin.mff.cuni.cz/~alc2014/">Algebras and Clones fest</a> Prague, June 30–July 3.</li>
  <li><a href="http://cie2014.inf.elte.hu/">Computability in Europe</a> Budapest, June 23–27.</li>
  <li><a href="http://www.jku.at/algebra/content/e176230/e176557/e213618">88th Workshop on General Algebra</a> Warsaw, June 19–22.</li>
  <li><a href="http://scaladays.org/">Scala Days</a> Berlin, June 16–18.  </li>
  <li><a href="http://www.kpfu.ru/main_page?p_sub=25931">Algebra and Mathematical Logic: Theory and Applications</a> Kazan, Russia, June 2–6.</li>
  <li><a href="http://www.aslonline.org/asl_meetings.php">Association for Symbolic Logic North American Meeting</a> Boulder, May 19–22.</li>
  <li><a href="http://www.dagstuhl.de/14201">Horn formulas, directed hypergraphs, lattices and closure systems</a> Dagstuhl, Germany, May 11–16.</li>
  <li><a href="http://www.math.osu.edu/conferences/denison32">32nd Ohio State-Denison Math Conference</a>
Columbus, Ohio, May 9–11.  </li>
  <li><a href="http://www.cs.nott.ac.uk/~txa/mgs.2014/">Midlands Grad School in Foundations of CS</a>
Nottingham, UK, April 22–26.   </li>
  <li><a href="http://www.dipmat.unisa.it/ischiagrouptheory/">Ichia Group Theory</a> Ichia, Italy, April 1–5. </li>
  <li><a href="http://www.jku.at/algebra/content/e176230/e176557/e213625">87th Workshop on General Algebra</a> Linz, Austria, February 7–9.</li>
</ul>

<h2 id="other-conference-lists">Other Conference Lists</h2>
<ul>
  <li><a href="http://spot.colorado.edu/~kearnes/conf.html">General Algebra Conferences</a></li>
  <li><a href="http://www.conference-service.com/conferences/algebra.html">COMS: Algebra</a></li>
  <li><a href="http://www.conference-service.com/conferences/logic.html">COMS: Mathematical Logic</a></li>
  <li><a href="http://www2.informatik.hu-berlin.de/~lics/logic-confs/index.html">Logic Related Conferences</a></li>
  <li><a href="http://cstheory.stackexchange.com/questions/7900/list-of-tcs-conferences-and-workshops">A list of conferences in theoretical computer science</a></li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[TypeFunc]]></title>
    <link href="http://williamdemeo.github.io/blog/2014/02/13/typefunc/"/>
    <updated>2014-02-13T09:23:58-05:00</updated>
    <id>http://williamdemeo.github.io/blog/2014/02/13/typefunc</id>
    <content type="html"><![CDATA[<p>I started a GitHub repository called TypeFunc in an effort to get my head around
the massive amount of online resources for learning about type theory, functional
programming, category theory, $\lambda$-calculus, and connections between
topology and computing. </p>

<!-- more -->

<p>At this point, <a href="https://github.com/williamdemeo/TypeFunc">the TypeFunc repository</a>
is mostly a collection of links, but it also includes notes and
software resources that I have found helpful.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Overalgebras]]></title>
    <link href="http://williamdemeo.github.io/blog/2014/02/13/overalgebras/"/>
    <updated>2014-02-13T08:42:53-05:00</updated>
    <id>http://williamdemeo.github.io/blog/2014/02/13/overalgebras</id>
    <content type="html"><![CDATA[<p>In the <a href="https://github.com/williamdemeo/Overalgebras">Overalgebras GitHub repo</a>
resides the article
<a href="https://github.com/williamdemeo/Overalgebras/raw/master/DeMeo-Expansions-AU-2013.pdf">Expansions of finite algebras and their congruence lattices</a>, <em>Algebra
Universalis</em>, <strong>69</strong>, 2013. 
Also included is the GAP software I wrote for constructing new finite algebras by
extending and expanding transitive G-sets, as described in the paper. </p>

<!-- more -->

<p>The published version of the paper is in the file <a href="https://github.com/williamdemeo/Overalgebras/raw/master/DeMeo-Expansions-AU-2013.pdf">DeMeo-Expansions-AU-2013.pdf</a>,
and is also available at <a href="http://link.springer.com">springer.com</a>. </p>

<p>In the file <a href="https://github.com/williamdemeo/Overalgebras/blob/master/gap2uacalc.g">gap2uacalc.g</a> is a GAP program that can be used on its own to convert GAP groups and G-sets into UACalc .ua files,
which can then be imported into the <a href="http://uacalc.org">Universal Algebra Calculator</a>.
See <a href="http://universalalgebra.wordpress.org/documentation/gap/gap-and-uacalc/">universalalgebra.org</a> for more information about <a href="https://github.com/williamdemeo/Overalgebras/blob/master/gap2uacalc.g">gap2uacalc.g</a>.</p>

<p>For questions, comments, or suggestions please <a href="https://github.com/williamdemeo/Overalgebras/issues">submit an issue</a>.</p>

<p>Thanks for your interest in this work!</p>

<p><a href="https://github.com/williamdemeo">@williamdemeo</a></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[IEProps]]></title>
    <link href="http://williamdemeo.github.io/blog/2014/02/13/ieprops/"/>
    <updated>2014-02-13T08:42:42-05:00</updated>
    <id>http://williamdemeo.github.io/blog/2014/02/13/ieprops</id>
    <content type="html"><![CDATA[<p>The <a href="https://github.com/williamdemeo/IEProps">IEPost GitHub repository</a> contains a draft of the article
<a href="https://github.com/williamdemeo/IEProps/blob/master/CommAlg/DeMeo-IEProps-rev1.pdf">Interval enforceable properties of finite groups</a>, to appear in <em>Communications in Algebra</em>.</p>

<!-- more -->

<p>The paper has been accepted and is in the final review stage. It should appear in print sometime in 2014.
The original submission is available in the file <a href="https://github.com/williamdemeo/IEProps/blob/master/CommAlg/DeMeo-IEProps-rev1.pdf">DeMeo-IEProps-rev1.pdf</a>. The latest revision is in the tex directory.</p>

<p>For questions, comments, or suggestions please <a href="https://github.com/williamdemeo/IEProps/issues">submit an issue</a>.</p>

<p>Thanks for your interest in this work!</p>

<p><a href="https://github.com/williamdemeo">@williamdemeo</a></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[GroupSound]]></title>
    <link href="http://williamdemeo.github.io/blog/2014/02/13/groupsound/"/>
    <updated>2014-02-13T06:23:41-05:00</updated>
    <id>http://williamdemeo.github.io/blog/2014/02/13/groupsound</id>
    <content type="html"><![CDATA[<p><em>What does a nonabelian group sound like?</em></p>

<p><a href="http://soundmath.github.io/GroupSound/">The GroupSound project</a> is
about harmonic analysis on finite groups. Classical dsp filtering algorithms can
be implemented as operations involving functions (e.g., audio signals) defined
on a finite group. That is, the group serves as the domain, or “index set,” of
the functions.  In this project, we explore the idea of using the finite group 
as an adjustable parameter of a digital audio filter. 
<!-- more --></p>

<p>Underlying many digital signal processing (dsp) algorithms, in particular those
used for digital audio filters, is the convolution operation, which is a
weighted sum of translations $f(x-y)$. Most classical results of dsp are easily
and elegantly derived if we define our functions on $\mathbb{Z}/n\mathbb{Z}$, the
abelian group of integers modulo n. If we replace this underlying “index set”
with a nonabelian group, then translation may be written $f(y^{-1}x)$, and the
resulting audio filters arising from convolution naturally produce different
effects than those obtained with ordinary (abelian group) convolution. </p>

<p>By listening to samples produced using various nonabelian groups, we try to get
a sense of the “acoustical characters” of finite groups.  </p>

<p>Please visit
<a href="http://soundmath.github.io/GroupSound/">the GroupSound project webpage</a> for
more details. </p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Cloning an Octopress repo]]></title>
    <link href="http://williamdemeo.github.io/blog/2014/02/07/cloning-an-octopress-repo/"/>
    <updated>2014-02-07T20:46:19-05:00</updated>
    <id>http://williamdemeo.github.io/blog/2014/02/07/cloning-an-octopress-repo</id>
    <content type="html"><![CDATA[<p>When attempting to clone my Octopress repository on a new machine, I had the
same  <code>Updates were rejected</code> problem that is described on <a href="http://weishi.github.io/blog/2013/07/24/setup-an-existing-octopress-repository-after-git-clone/">this page</a>.
Based on the information provided on that page, combined with a few other
commands required for Ubuntu machines, this post provides instructions for
cloning an Octopress repository.<br />
<!-- more --></p>

<p>(This works on Ubuntu 13.10 and probably other variants.)</p>

<hr />

<ol>
  <li>
    <p>Make sure ruby1.9.1-dev and gem are installd:</p>

    <pre><code>sudo apt-get install ruby1.9.1-dev gem
gem install bundler
rbenv rehash
</code></pre>
  </li>
  <li>
    <p>Get the source and initialize empty _deploy directory:</p>

    <pre><code>git clone git@github.com:williamdemeo/williamdemeo.github.io.git
cd williamdemeo.github.io/
git checkout source
mkdir _deploy
cd _deploy
git init
git remote add -t master -f origin git@github.com:williamdemeo/williamdemeo.github.io.git
cd ..
</code></pre>
  </li>
  <li>
    <p>Use bundler to check that all the dependencies in GemFile are met:</p>

    <pre><code>bundle install
</code></pre>
  </li>
  <li>
    <p>Generate the pages and deploy:</p>

    <pre><code>rake generate
rake deploy
</code></pre>
  </li>
</ol>

<p><strong>Troubleshooting.</strong> 
If <code>rake generate</code> produces “invalid byte sequence in US-ASCII” then try the following: </p>

<pre><code>    # from the command line
    export LANG=en_US.UTF-8
    export LANGUAGE=en_US.UTF-8
    export LC_ALL=en_US.UTF-8
    bundle
</code></pre>

<hr />

<h2 id="workflow">Workflow</h2>

<ol>
  <li>
    <p>Make some changes, e.g., create a new post:</p>

    <pre><code>rake new_post["title"]
</code></pre>
  </li>
  <li>
    <p>Posts live in <code>source/_posts</code>.  Edit one and push the changes to source
branch either directly with Magit or with</p>

    <pre><code>git add .
git commit -am "explanation of changes" 
git push origin source
</code></pre>
  </li>
  <li>
    <p>Now preview the changes: <code>rake preview</code> and load <code>http://localhost:4000</code> in browser.</p>
  </li>
  <li>
    <p>When satisfied, <code>rake deploy</code>.</p>
  </li>
</ol>

<hr />

<h2 id="other-resources">Other Resources</h2>

<ul>
  <li><a href="http://stackoverflow.com/questions/14245822/cannot-install-redcloth">Get RedCloth installed properly on Ubuntu</a>   </li>
  <li><a href="http://paulsturgess.co.uk/blog/2013/04/24/hello-octopress-and-github-pages/">Setup Octopress, pick a theme, maintain with rake</a>  </li>
  <li><a href="http://weishi.github.io/blog/2013/07/24/setup-an-existing-octopress-repository-after-git-clone/">Setup an existing Octopress repo</a>  </li>
  <li><a href="http://blog.zerosharp.com/clone-your-octopress-to-blog-from-two-places/">Maintain Octopress repo on multiple machines</a>  </li>
  <li><a href="http://www.lucypark.kr/blog/2013/02/25/mathjax-kramdown-and-octopress/">Get MathJax working (one way)</a></li>
  <li><a href="http://www.idryman.org/blog/2012/03/10/writing-math-equations-on-octopress/">Get MathJax working (another)</a>  </li>
  <li><a href="https://github.com/imathis/octopress/wiki/3rd-Party-Octopress-Themes">Select a nice theme</a>  </li>
  <li><a href="http://stackoverflow.com/questions/17031651/invalid-byte-sequence-in-us-ascii-argument-error-when-i-run-rake-dbseed-inra">Troubleshoot UTF-8 locale</a>  </li>
  <li><a href="http://blog.bigdinosaur.org/changing-octopresss-header/">Changing fonts and colors</a></li>
  <li>Carl Boettiger has an awesome <a href="http://carlboettiger.info/index.html">open notebook</a>.</li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Diaconescu's Theorem]]></title>
    <link href="http://williamdemeo.github.io/blog/2014/02/05/diaconescus-theorem/"/>
    <updated>2014-02-05T22:52:59-05:00</updated>
    <id>http://williamdemeo.github.io/blog/2014/02/05/diaconescus-theorem</id>
    <content type="html"><![CDATA[<p>I learned about
<a href="http://en.wikipedia.org/wiki/Diaconescu%27s_theorem">Diaconescu’s Theorem</a>
from <a href="http://video.ias.edu/members/1213/0318-AndrejBauer">Andrej Bauer’s lecture</a>.</p>

<p>This post describes the proof as it was presented by Bauer.  These notes are rough
and intended for my own reference.
Please see <a href="http://dorais.org/archives/1031">François Dorais’ blog post</a> 
for a nice discussion of this topic.</p>

<!-- more -->

<hr />

<ul>
  <li>
    <p><strong>The Axiom of Choice</strong> (AC) states that if $\mathcal{S}$ is a collection of nonempty
sets, then there is a choice function $f$ that can be used to select an element
from each set in $\mathcal{S}$.</p>
  </li>
  <li>
    <p><strong>Law of the Excluded Middle</strong> (LEM) states that $P$ is a proposition, then
$P \bigvee \neg P$.</p>
  </li>
  <li>
    <p><strong>Diaconescu’s Theorem:</strong> AC $\rightarrow$ LEM.</p>

    <p><strong>Proof:</strong>  Assume AC.  Let $P$ be any proposition.  We will prove
$P \bigvee \neg P$.</p>

    <p>Define the set $\mathbf{2} = \{0, 1\} = \{x \mid x = 0 \bigvee x= 1\}$.</p>

    <p>Define the following sets:</p>

<script type="math/tex; mode=display">A = \{x \mid (x = 0) \bigvee P\}</script>

<script type="math/tex; mode=display">B = \{y \mid (y = 1) \bigvee P\}</script>

    <p>Note that $P \Rightarrow A = B = \mathbf{2}$. Therefore,
$A \neq B \Rightarrow \neg P$.</p>

    <p>Both of the sets $A$ and $B$ are nonempty, since 0 belongs to $A$ and 1 belongs to $B$. </p>

    <p>Therefore, $\{A, B\}$ is a set of nonempty sets, so by AC we have a choice function,
<!-- Note that the set $\\{A, B\\}$ is defined as $\\{A, B\\} = \\{X \in
\mathbf{Set} | X = A \bigvee X = B\\}$ (by pairing axiom).--></p>

<script type="math/tex; mode=display">f : \{A, B\} \rightarrow A \cup B, \text{ and note that } A\cup B = \{0, 1\}.</script>

    <p>Now, because equality on $\mathbb{N}$ <em>is</em> decidabile (which can be proved
by induction on $\mathbb{N}$), we can consider cases:</p>

    <p>If $f(A) = 0 = f(B)$, then $0 \in B$, so $P$.</p>

    <p>If $f(A) = 1 = f(B)$, then $1 \in A$, so $P$.</p>

    <p>If $f(A) \neq f(B)$, then $A \neq B$ so $P$ cannot hold.
(Recall, $P \Rightarrow A = B = \mathbf{2}$.)</p>

    <p>We have covered all cases and found that $P \bigvee \neg P$ holds. 
<span style="float:right">∎</span></p>
  </li>
</ul>

<hr />

<h2 id="coq">Coq</h2>

<p><a href="http://coq.inria.fr/V8.1/stdlib/Coq.Logic.Diaconescu.html">Proofs of Diaconescu’s Theorem in Coq</a></p>

<hr />

<h2 id="appendix">Appendix</h2>

<ul>
  <li><strong>Decidable Sets.</strong>
A set $S$ is <strong>decidable</strong> if for all $x, y \in S$ we have
$x = y \bigvee x \neq y$. The empty set and singleton sets are trivially
decidable, but some more complicated sets are decidable too. For example, one
can use induction to show that the set of natural numbers is decidable. </li>
</ul>

<hr />

<h2 id="references">References</h2>

<ul>
  <li>Diaconescu, “Axiom of choice and complementation,” <em>Proc. AMS</em> 51 (1975), 176–178. <a href="http://dx.doi.org/10.1090/S0002-9939-1975-0373893-X">doi:10.1090/S0002-9939-1975-0373893-X</a></li>
</ul>
]]></content>
  </entry>
  
</feed>
