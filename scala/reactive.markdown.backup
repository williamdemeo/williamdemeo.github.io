
<!DOCTYPE html>
<!--[if IEMobile 7 ]><html class="no-js iem7"><![endif]-->
<!--[if lt IE 9]><html class="no-js lte-ie8"><![endif]-->
<!--[if (gt IE 8)|(gt IEMobile 7)|!(IEMobile)|!(IE)]><!--><html class="no-js" lang="en"><!--<![endif]-->
<head>
  <meta charset="utf-8">
  <title>Reactive Course Notes - William DeMeo</title>
  <meta name="author" content="William DeMeo">
  <link rel="author" href="humans.txt">
  <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">

  
    
  
  <meta name="description" content="These are *very rough* personal notes from a Coursera course I took in 2015 called
[Principles of Reactive Programming](https://www.coursera.org/ &hellip;">
  
  <!-- http://t.co/dKP3o1e -->
  <meta name="HandheldFriendly" content="True">
  <meta name="MobileOptimized" content="320">
  <meta name="viewport" content="width=device-width, initial-scale=1">

  
  <link rel="canonical" href="http://williamdemeo.github.io/scala/reactive.markdown.backup">
  <link href="/favicon.png" rel="icon">
  <link href='http://fonts.googleapis.com/css?family=Cantarell' rel='stylesheet' type='text/css'>
  <link href="/stylesheets/screen.css" media="screen, projection" rel="stylesheet" type="text/css">
  <link href="/atom.xml" rel="alternate" title="William DeMeo" type="application/atom+xml">
  <meta name="og:type" content="website" />
  <meta name="og:site_name" content="William DeMeo" />
  <meta name="og:title" content="Reactive Course Notes" />
  <meta name="og:description" content="These are *very rough* personal notes from a Coursera course I took in 2015 called
[Principles of Reactive Programming](https://www.coursera.org/ &hellip;" />
  <meta name="og:url" content="http://williamdemeo.github.io/scala/reactive.markdown.backup"/>
  <meta name="url" content="http://williamdemeo.github.io/scala/reactive.markdown.backup">
  
  <meta name="distribution" content="global">
  <!--Fonts from Google"s Web font directory at http://google.com/webfonts -->
<link href="http://fonts.googleapis.com/css?family=PT+Serif:regular,italic,bold,bolditalic" rel="stylesheet" type="text/css">
<link href="http://fonts.googleapis.com/css?family=PT+Sans:regular,italic,bold,bolditalic" rel="stylesheet" type="text/css">

<script src="http://ajax.googleapis.com/ajax/libs/jquery/1.8.2/jquery.min.js"></script>
<script src="/javascripts/foundation.min.js"></script>

<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
  extensions: ["tex2jax.js"],
  jax: ["input/TeX", "output/HTML-CSS"],
  tex2jax: {
    inlineMath: [ ['$', '$'] ],
    displayMath: [ ['$$', '$$']],
    processEscapes: true,
    skipTags: ['script', 'noscript', 'style', 'textarea', 'pre', 'code']
  },
  messageStyle: "none",
  "HTML-CSS": { preferredFont: "TeX", availableFonts: ["STIX","TeX"] },
  TeX: {extensions: ["AMSmath.js","AMSsymbols.js"]}
    });
</script>
<script src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS_HTML" type="text/javascript"></script>
<script src="/javascripts/AMSmath.js" type="text/javascript"></script>


  
  <script type="text/javascript">
    var _gaq = _gaq || [];
    _gaq.push(['_setAccount', 'UA-44974674-2']);
    _gaq.push(['_trackPageview']);

    (function() {
      var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
      ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
      var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
    })();
  </script>



</head>


<nav role="navigation"><div class="navbar">
  <div class="navbar-inner">
    <a class="brand" href="/">William DeMeo</a>
    <ul class="nav">
      <li><a href="/">Home</a></li>
      <li><a href="/archives">Archives</a></li>
<!--      <li><a href="/pages">Pages</a></li>-->
    </ul>
    <ul class="nav" data-subscription="rss">
      <li><a href="/atom.xml" rel="subscribe-rss" title="subscribe via RSS">RSS</a></li>
      
    </ul>
      
    <form class="navbar-form" action="http://google.com/search" method="get">
      <fieldset role="search">
        <input type="hidden" name="q" value="site:williamdemeo.github.io" />
        <input class="span2" type="text" name="q" results="0" placeholder="Search"/>
      </fieldset>
    </form>
      
    
  </div>
</div>
</nav>
<div class="wrapper_single">
  <div class="container">
    <article class="span8 offset2 article-format" role="article">
      <div role="div">
        
        <header>
          <h1 class="entry-title">Reactive Course Notes</h1>
          <p class="meta">








  


<time datetime="2015-04-18T15:02:00-10:00" pubdate data-updated="true">Apr 18<span>th</span>, 2015</time></p>
        </header>
        
        These are *very rough* personal notes from a Coursera course I took in 2015 called
[Principles of Reactive Programming](https://www.coursera.org/course/reactive)
by Martin Odersky, Erik Meijer, Roland Kuhn.

The link to the version of the course that I took is
[https://class.coursera.org/reactive-002](https://class.coursera.org/reactive-002).

General information about the course and possible future sessions is found at
[https://www.coursera.org/course/reactive](https://www.coursera.org/course/reactive).

--------------------------------

# Getting Started!

This is the first assignment.  The goal is to familiarize yourself with the
infrastructure and the tools required during this class. The grade
in this assignment will be excluded from your final grade for the course.

**Installing Required Tools**
Before anything else, it is most important that you make sure that all tools are
correctly installed. Take a very careful look at the
[Tools Setup](https://class.coursera.org/reactive-002/wiki/ToolsSetup) page and
verify that all of the listed tools work on your machine. 

# The Assignment

## Part 1: Obtain the Project Files
Download the
[example.zip](https://d28rh4a8wq0iu5.cloudfront.net/reactive/assignments/example.zip)
handout archive file and extract it somewhere on your machine. 

----------------

## Part 2: Using the Scala REPL
During this class we will always launch the Scala REPL (the interactive Scala
console) through sbt. This way you don't need to install the Scala distribution
on your machine, having sbt is enough. (In case you prefer to have the scala
command available on your machine, you can download the Scala distribution from
the [scala-lang.org website](http://www.scala-lang.org/downloads).) 

Open the
[Sbt Tutorial](https://class.coursera.org/reactive-002/wiki/SbtTutorial)
page and follow the first steps until "Running the Scala Interpreter." Note that
sbt can only be started inside a project directory, so first navigate to the
project directory that you created in Part 1, then type `sbt` on the command line. 
Then type `console` to get the Scala REPL. Finally, enter a few Scala
expressions to make sure everything is working as expected. 

-------------------

## Part 3: Opening the Project in Eclipse
To work on the source code of the project, you have to import it into
eclipse.

### Creating the Eclipse project from sbt
First, you need to create the Eclipse from sbt, using the eclipse command:

    $ sbt
    > eclipse
    ...

### Opening the Project in Eclipse

Once the Eclipse project has been created from sbt, you can import it in
Eclipse. Follow these steps to work on the project using the Scala IDE: 

1. Start up Eclipse
2. Select "File" - "Import" from the menu
3. In the folder "General", select the item "Existing Projects into Workspace" and click "Next >"
4. In the textfield "Select root directory:" select the directory where you unpacked the downloaded handout archive
5. Click "Finish".

### Working with Eclipse
In the folder `src/main/scala`, open the package `example` and double-click the
file `Lists.scala`. There are two methods in this file that need to be
implemented (`sum` and `max`).

When working on an assignment, **it is important that you don't change any
existing method**, class or object names or types. Doing so will prevent our
automated grading tools from working and you have a high risk of not obtaining
any points for your solution. 

To learn how to use the Scala IDE, we recommend you to watch the official
tutorial video which is available here:
[http://scala-ide.org/docs/current-user-doc/gettingstarted/index.html](http://scala-ide.org/docs/current-user-doc/gettingstarted/index.html). 
This website also contains a lot more useful information and handy tricks that
make working with eclipse more efficient. 

### Running Tests inside Eclipse
You can easily execute the test suites directly inside eclipse. Simply navigate
to source file of the test suite in `src/test/scala`, right-click on it and select
"Run As" - "JUnit Test". 

The JUnit window will display the result of each individual test.


-------------------

## Part 4: Running your Code
Once you start writing some code, you might want to run your code on a few
examples to see if it works correctly. We present two possibilities to run the
methods you implemented. 

### Using the Scala REPL

In the sbt console, start the Scala REPL by typing `console`.

    > console
    [info] Starting scala interpreter...

    scala>

The classes of the assignment are available inside the REPL, so you can for
instance import all the methods from object Lists: 

    scala> import example.Lists._
    import example.Lists._

    scala> max(List(1,3,2))
    res1: Int = 3

### Using a Main Object

Another way to run your code is to create a new Main object that can be executed
by the Java Virtual Machine. 

1. In eclipse, right-click on the package `example` in `src/main/scala` and select "New" - "Scala Object"
2. Use `Main` as the object name (any other name would also work)
3. Confirm by clicking "Finish"

In order to make the object executable it has to extend the type `App`. Change the
object definition to the following: 

    object Main extends App {
      println(Lists.max(List(1,3,2)))
    }

Now the `Main` object can be executed. In order to do so in eclipse:

1. Right-click on the file `Main.scala`
2. Select "Run As" - "Scala Application"

You can also run the `Main` object in the sbt console by simply using the command `run`.

------------------------

## Part 5: Writing Tests

Throughout the assignments of this course we will require you to write unit
tests for the code that you write. Unit tests are the preferred way to test your
code because unlike REPL commands, unit tests are saved and can be re-executed
as often as required. This is a great way to make sure that nothing breaks when
you have go back later to change some code that you wrote earlier on. 

We will be using the ScalaTest testing framework to write our unit tests. In
eclipse, navigate to the folder `src/test/scala` and open the file
`ListsSuite.scala` in package `example`. This file contains a step-by-step tutorial
to learn how to write and execute ScalaTest unit tests. 

------------------------------

## Part 6: Submitting your Solution

Once you implemented all the required methods and tested you code thoroughly,
you can submit it to Coursera. The only way to submit your solution is through
sbt, so you need to start the sbt console in your project directory. 

In order to submit, you need to have your coursera username and your submission
password. Note that the submission password is NOT your login password, instead
it is a special password generated by Coursera. You can look it up on the
[assignments page](https://class.coursera.org/reactive-002/assignment/index). 

Submitting in sbt is simply done by invoking the `submit` task:

    > submit your.email@domain.com submissionPassword
    [info] Connecting to coursera. Obtaining challenge...
    [info] Computing challenge response...
    [info] Submitting solution...
    [success] Your code was successfully submitted: Your submission has been accepted and will be graded shortly.
    [success] Total time: 2 s, completed Aug 30, 2012 4:30:10 PM
    > 

You are allowed to **resubmit a maximum of 5 times**! Once you submit your solution,
you should see your grade and a feedback about your code on the Coursera website
within 10 minutes. If you want to improve your grade, just submit an improved
solution. The best of all your submissions will count as the final grade. 


        
          <footer>
            <p class="meta">
              
              








  


<time datetime="2015-04-18T15:02:00-10:00" pubdate data-updated="true">Apr 18<span>th</span>, 2015</time>
              
            </p>
          </footer>
        
      </div>
    
    </article>
  </div>
</div>
<div id="footer-widgets">
  <div class="container">
    <div class="row">
  <div class="span3">
    <h2>recent posts</h2>
    <ul class="recent_posts">
      
        <li>
          <a href="/2017/04/06/conferences-in-algebra/">Conferences in Algebra</a>
        </li>
      
        <li>
          <a href="/2017/04/06/congruences-of-partial-algebras/">Congruences of Partial Algebras</a>
        </li>
      
        <li>
          <a href="/2015/01/11/three-sat-and-partition-lattices/">3-SAT and partition lattices</a>
        </li>
      
        <li>
          <a href="/2014/03/19/probability-quiz/">Jane Street Test</a>
        </li>
      
        <li>
          <a href="/2014/02/27/learn-you-an-agda/">Learn You an Agda</a>
        </li>
      
    </ul>
    <h2><a href="/archives">archives</a></h2>
  </div>
  <!-- <div class="span3"> -->
  <!--   
 -->
  <!-- </div> -->
  <div class="span7">
    
<h2>recent git activity</h2>
<dl id="gh_repos" class="dl-horizontal" data-github-user="williamdemeo" data-github-repo-count="5" data-github-skip-forks="true">
  <dd class="loading">updating...</dd>
</dl>
<script src="/javascripts/github.js" type="text/javascript"> </script>
<script src="/javascripts/libs/jXHR.js" type="text/javascript"> </script>


  </div>
  <!-- <div class="span4"> -->
  <!--   
 -->
  <!-- </div> -->
  <div class="span2">
    <h2>found on</h2>

<a href="https://github.com/williamdemeo/" rel="tooltip" title="GitHub"><img class="social_icon" alt="github icon" src="/images/glyphicons_381_github.png"></a>









<a href="https://plus.google.com/u/0/+williamdemeo?rel=author" rel="tooltip" title="Google Plus"><img class="social_icon" alt="Google Plus icon" src="/images/glyphicons_386_google_plus.png"></a>





<a href="http://mathoverflow.net/users/9124/william-demeo/" rel="tooltip" title="MathOverflow"><img class="social_icon" alt="math overflow icon" src="/images/mathoverflow.ico"></a>



<a href="http://math.stackexchange.com/users/10915/william-demeo/" rel="tooltip" title="Math SE"><img class="social_icon" alt="math overflow icon" src="/images/mathstackexchange.ico"></a>




  </div>
</div>

  </div>
</div>
<footer class="footer">
  <div class="container">
    <p class="pull-left">
  <a href="/">William DeMeo</a>
  - Copyright &copy; 2017 - William DeMeo
</p>
<p class="pull-right">
  <span>Powered by <a href="http://octopress.org/">Octopress</a>.</span>
  
    <span>Designed by <a href="http://www.AdrianArtiles.com">Adrian Artiles</a>.</span>
  
</p>

  </div>
</footer>

<script src="//ajax.googleapis.com/ajax/libs/jquery/1.7.2/jquery.min.js" type="text/javascript"></script>
<script>window.jQuery || document.write('<script src="/javascripts/libs/jquery-1.7.2.min.js" type="text/javascript"><\/script>')</script>
<script src="/javascripts/libs/bootstrap.min.js" type="text/javascript"></script>
<script src="/javascripts/jquery.tweet.js" type="text/javascript"></script>
<script src="/javascripts/jquery.instagram.js" type="text/javascript"></script>
<script src="/javascripts/libs/jquery.masonry.min.js" type="text/javascript"></script>
<script src="/javascripts/custom.js" type="text/javascript"></script>






  <script type="text/javascript">
    (function() {
      var script = document.createElement('script'); script.type = 'text/javascript'; script.async = true;
      script.src = 'https://apis.google.com/js/plusone.js';
      var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(script, s);
    })();
  </script>






